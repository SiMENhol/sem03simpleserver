package main

import (
	"io"
	"log"
	"net"
	"sync"

	"github.com/SiMENhol/is105sem03/mycrypt"
)

func main() {

	var wg sync.WaitGroup

	server, err := net.Listen("tcp", "172.17.0.2:8080")
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("bundet til %s", server.Addr().String())
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			log.Println("før server.Accept() kallet")
			conn, err := server.Accept()
			if err != nil {
				return
			}
			go func(c net.Conn) {

				defer c.Close()
				for {
					buf := make([]byte, 1024)
					n, err := c.Read(buf)
					if err != nil {
						if err != io.EOF {
							log.Println(err)
						}
						break // fra for løkke
					}
				}
				// Dekrypterer meldingen
				dekryptertMelding := mycrypt.Krypter([]rune(string(buf[:n])), mycrypt.ALF_SEM03, len(mycrypt.ALF_SEM03)-4)
				log.Println("Dekryptert melding: ", string(dekryptertMelding))

				// Sjekk om dekrypteringen var vellykket
				if err != nil {
					log.Println("Dekryptering feilet: ", err)
				} else {
					log.Println("Melding dekryptert suksessfullt")
				}
				go func(c net.Conn) {
				defer c.Close()
				for {
					buf := make([]byte, 1024)
					n, err := c.Read(buf)
					if err != nil {
						if err != io.EOF {
							log.Println(err)
						}
						return // fra for løkke
					}
					// Behandle den dekrypterte meldingen
					switch msg := string(dekryptertMelding); msg {
					case "ping":
						_, err = c.Write([]byte("pong"))
					default:
						_, err = c.Write(buf[:n])
					}
					return // fra for løkke
				}

			}(conn)
		}
	}()
	wg.Wait()
}

/*
	if err != nil {
		if err != io.EOF {
			log.Println(err)
			/* switch msg := string(buf[:n]); msg {
			case "ping":
				_, err = c.Write([]byte("pong"))
			default:
				_, err = c.Write(buf[:n])
			}
			if err != nil {
				if err != io.EOF {
					log.Println(err)
				}

*/
